#include <stdio.h>
int merge(int arr[], int temp[], int left, int mid, int right)
{
    int i = left, j = mid + 1, k = left, invCount = 0;
    // Merging two halves and counting inversions
    while (i <= mid && j <= right)
{
        if (arr[i] <= arr[j]) 
{
            temp[k++] = arr[i++];
        } 
else
{
            temp[k++] = arr[j++];
            invertingCount += (mid - i + 1); // All remaining elements in left half are greater than arr[j]
        }
    }
    
    while (i <= mid) temp[k++] = arr[i++];
    while (j <= right) temp[k++] = arr[j++];
    
    for (i = left; i <= right; i++) arr[i] = temp[i]; // Copy back the merged array
    return invertingCount;
}
int mergeSortAndCount(int arr[], int temp[], int left, int right)
{
    if (left >= right) return 0;
    int mid = (left + right) / 2;
    int invCount = mergeSortAndCount(arr, temp, left, mid) + 
                   mergeSortAndCount(arr, temp, mid + 1, right) + 
                   merge(arr, temp, left, mid, right);
    return invCount;
}

int main()
{
    int n;    
    printf("Enter size of the array: ");
    scanf("%d", &n);
    int arr[n];
    printf("Enter elements of the array: ");
    for (int i = 0; i < n; i++)
{
        scanf("%d", &arr[i]);
    }
    int temp[n];
    int result = mergeSortAndCount(arr, temp, 0, n - 1); 
    printf("Number of inversions: %d\n", result);
    return 0;
}


